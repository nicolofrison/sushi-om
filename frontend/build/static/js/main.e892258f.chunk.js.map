{"version":3,"sources":["services/base.service.ts","services/user.service.ts","Utils/UserUtils.ts","services/alert.service.ts","Utils/Enums.ts","Utils/TranslationKeys.js","Utils/Utils.ts","services/order.service.ts","Orders/OrdersList.ts","Orders/UserCart/AddOrder.tsx","Orders/UserCart/EditOrder.tsx","Orders/UserCart/CartOrdersRow.tsx","Orders/UserCart/CartOrdersList.tsx","Orders/UserOrders/UserConfirmedOrdersRow.tsx","Orders/UserOrdersList.tsx","Orders/UserOrders/UserConfirmedOrdersList.tsx","Orders/GroupOrdersList.tsx","Orders/ConfirmedOrdersList.tsx","Orders/Orders.tsx","SignUp/SignUpUser.tsx","SignUp/SignUpGroup.tsx","SignUp/SignUp.tsx","Utils/TranslationSelection.tsx","Utils/TopAlert.tsx","App.tsx","reportWebVitals.ts","i18nextConf.js","index.tsx"],"names":["BaseService","baseUrl","process","token","headers","UserService","authPost","axios","post","this","userId","get","config","confirmed","patch","instance","getInstance","UserUtils","jsonUser","localStorage","getItem","user","JSON","parse","console","debug","accessToken","removeUser","getUser","removeItem","setItem","stringify","AlertService","setAlertVisibleTimeout","setAlertVisible","setAlertText","setAlertType","text","type","window","clearTimeout","setTimeout","SignUpStep","SignUpFormType","OrdersType","AlertType","translations","firstName","lastName","username","createGroup","joinGroup","groupName","groupPassword","continue","code","amount","users","actions","remove","add","userOrders","groupOrders","allConfirmedOrders","subtract","round","expiredAuthenticationToken","authenticationError","missingOrWrongAuthenticationToken","wrongAuthenticationToken","info","success","warning","error","orderAddedSuccessfully","orderEditedSuccessfully","orderRemovedSuccessfully","confirm","checked","ordersEmpty","groupAlreadyExists","groupDoesNotExists","groupDoesNotExistsOrWrongPassword","orderAlreadyConfirmedCannotEdit","orderDoesNotExists","userAlreadyExistsInGroup","userDoesNotExists","internalServerError","orderIsNotConfirmed","orderCheckedSuccessfully","language","ordersToShow","cart","ToFirstCapitalLetter","charAt","toUpperCase","slice","handleError","isAxiosError","errorResponse","response","errorMessage","data","translationKey","message","showAlert","IsLoggedIn","location","reload","OrderService","orderPost","groupId","query","length","orderId","delete","OrdersList","setState","isLoading","getOrders","then","res","orders","sortedOrders","sort","a","b","roundOrderValue","log","catch","updateOrders","React","Component","AddOrder","props","state","event","target","value","name","getToken","addOrder","alertService","t","TableRow","TableCell","align","TextField","autoComplete","variant","required","disabled","ordersConfirmed","id","label","fullWidth","onChange","handleInputChange","bind","inputProps","inputMode","pattern","IconButton","size","onClick","fontSize","color","withTranslation","EditOrder","updateTimeoutId","newAmount","updateOrderAmount","amountDiff","updateOrder","Grid","container","wrap","alignContent","alignItems","updateAmount","RemoveCircle","style","textAlign","onBlur","e","onKeyDown","key","blur","handleAmountChange","AddCircle","CartOrdersRow","obj","orderRow","useTranslation","notConfirmedUsersOrders","undefined","deleteOrder","CartOrdersList","updateUserConfirmation","ordersRows","colSpan","Fragment","map","row","Paper","square","sx","pb","TableContainer","component","Table","TableHead","TableBody","CircularProgress","Button","UserConfirmedOrdersRow","setIsLoading","Checkbox","updateOrderChecked","scope","RoundType","UserConfirmedOrdersList","width","UserOrdersList","updateConfirmed","newUser","setUserConfirmation","setUser","FormControl","InputLabel","Select","labelId","toString","parseInt","MenuItem","allConfirmed","o","filter","index","array","indexOf","r","usersList","forEach","surname","Object","entries","userRow","UserTableRow","content","usersTable","Box","justifyContent","useState","open","setOpen","allUserOrdersChecked","every","headerRow","contentRow","Collapse","in","timeout","unmountOnExit","Typography","UserOrders","userOrder","OrderRow","ConfirmedOrdersList","expandedCode","codesList","codeRow","CodeUsersTable","codesTable","usersOrders","codeTotalAmount","allCodeOrdersChecked","UsersOrders","UserOrderRow","Orders","ordersType","setOrdersType","ordersList","group","GroupOrdersList","all","spacing","item","xs","SignUpUser","SetFirstName","SetLastName","SetUsername","noValidate","onSubmit","SetStep","sm","autoFocus","SignUpGroup","formType","create","SetGroupName","SetGroupPassword","SetFormType","submit","handleFormType","join","Copyright","Link","href","Date","getFullYear","SignUp","setFirstName","setLastName","setUsername","setGroupName","setGroupPassword","setFormType","step","setStep","useEffect","signType","signUp","handleSubmit","Container","maxWidth","CssBaseline","Avatar","mt","TranslationSelection","i18n","setLanguage","newLanguage","changeLanguage","l","TopAlert","isAlertVisible","alertText","alertType","init","position","top","left","right","Alert","severity","AlertTitle","Content","App","fallback","className","rowSpacing","margin","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","use","Backend","LanguageDetector","initReactI18next","fallbackLng","detection","order","cache","interpolation","escapeValue","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e892258f.chunk.js","sourcesContent":["export default class BaseService {\r\n    protected readonly baseUrl = `${process.env.REACT_APP_BACKEND_URL}:${process.env.REACT_APP_BACKEND_PORT}/`;\r\n\r\n    protected config(token: string) {\r\n        return {\r\n            headers: {\r\n                'Authorization': token,\r\n                'Content-Type': 'application/json; charset=utf-8'\r\n            }\r\n        }\r\n    }\r\n}","import axios from 'axios';\r\n\r\nimport AuthPost from '../Interfaces/AuthPost.interface';\r\nimport BaseService from './base.service';\r\n\r\nexport class UserService extends BaseService {\r\n    private static instance: UserService;\r\n\r\n    public static getInstance() {\r\n        if (!UserService.instance) {\r\n            UserService.instance = new UserService();\r\n        }\r\n\r\n        return UserService.instance;\r\n    }\r\n\r\n    public signUp(authPost: AuthPost) {\r\n        return axios.post(this.baseUrl + \"auth/register\", authPost);\r\n    }\r\n\r\n    public getUser(token: string, userId: number) {\r\n        return axios.get(this.baseUrl + \"users/\" + userId, this.config(token));\r\n    }\r\n\r\n    public updateUserConfirmation(token: string, userId: number, confirmed: boolean) {\r\n        return axios.patch(this.baseUrl + \"users/\" + userId, {confirmed}, this.config(token));\r\n    }\r\n}\r\n\r\nexport default UserService.getInstance();","import User from \"../Interfaces/User.interface\";\r\n\r\nexport default class UserUtils {\r\n\r\n    public static getUser(): User | null {\r\n        const jsonUser = localStorage.getItem(\"user\");\r\n        if (!jsonUser) {\r\n            return null;\r\n        }\r\n\r\n        const user = JSON.parse(jsonUser);\r\n        console.debug(user);\r\n        if (!user.accessToken) {\r\n            this.removeUser();\r\n            return null;\r\n        }\r\n\r\n        return user;\r\n    }\r\n\r\n    public static getToken(): string | null {\r\n        const user = this.getUser();\r\n\r\n        if(!user) {\r\n            return null;\r\n        }\r\n\r\n        return user.accessToken;\r\n    }\r\n\r\n    public static IsLoggedIn() {\r\n        return this.getUser() != null;\r\n    }\r\n\r\n    public static removeUser() {\r\n        localStorage.removeItem(\"user\");\r\n    }\r\n\r\n    public static setUser(user: User) {\r\n        localStorage.setItem(\"user\", JSON.stringify(user));\r\n    }\r\n}","import { AlertType } from \"../Utils/Enums\";\r\n\r\nexport class AlertService {\r\n    private static instance: AlertService;\r\n\r\n    private setAlertVisibleTimeout: number | undefined;\r\n\r\n    private setAlertVisible: React.Dispatch<React.SetStateAction<boolean>> | undefined;\r\n    private setAlertText: React.Dispatch<React.SetStateAction<string>> | undefined;\r\n    private setAlertType: React.Dispatch<React.SetStateAction<AlertType>> | undefined;\r\n\r\n    public static getInstance() {\r\n        if (!AlertService.instance) {\r\n            AlertService.instance = new AlertService();\r\n        }\r\n\r\n        return AlertService.instance;\r\n    }\r\n\r\n    public init(setAlertVisible: React.Dispatch<React.SetStateAction<boolean>>, \r\n        setAlertText: React.Dispatch<React.SetStateAction<string>>, \r\n        setAlertType: React.Dispatch<React.SetStateAction<AlertType>>) {\r\n            this.setAlertVisible = setAlertVisible;\r\n            this.setAlertText = setAlertText;\r\n            this.setAlertType = setAlertType;\r\n        }\r\n\r\n    public showAlert(text: string, type: AlertType) {\r\n        if (this.setAlertVisibleTimeout) {\r\n            window.clearTimeout(this.setAlertVisibleTimeout);\r\n        }\r\n\r\n        if (this.setAlertText && this.setAlertType && this.setAlertVisible) {\r\n            this.setAlertVisible(false);\r\n    \r\n            this.setAlertText(text);\r\n            this.setAlertType(type);\r\n    \r\n            this.setAlertVisible(true);\r\n            window.setTimeout(() => this.setAlertVisible ? this.setAlertVisible(false) : {}, 5000);\r\n        }\r\n    }\r\n}\r\n\r\nexport default AlertService.getInstance();","\r\nexport enum SignUpStep {\r\n    user,\r\n    group,\r\n    submit\r\n  }\r\n\r\nexport enum SignUpFormType {\r\n    create,\r\n    join\r\n}\r\n  \r\nexport enum OrdersType {\r\n  user, // user's orders\r\n  group,  // \r\n  all // all confirmed orders\r\n}\r\n\r\nexport enum AlertType {\r\n  info = \"info\",\r\n  success = \"success\",\r\n  warning = \"warning\",\r\n  error = \"error\",\r\n}\r\n","const translations = {\r\n    firstName: \"firstName\",\r\n    lastName: \"lastName\",\r\n    username: \"username\",\r\n    createGroup: \"createGroup\",\r\n    joinGroup: \"joinGroup\",\r\n    groupName: \"groupName\",\r\n    groupPassword: \"groupPassword\",\r\n    continue: \"continue\",\r\n    code: \"code\",\r\n    amount: \"amount\",\r\n    users: \"users\",\r\n    actions: \"actions\",\r\n    remove: \"remove\",\r\n    add: \"add\",\r\n    userOrders: \"userOrders\",\r\n    groupOrders: \"groupOrders\",\r\n    allConfirmedOrders: \"allConfirmedOrders\",\r\n    subtract: \"subtract\",\r\n    round: \"round\",\r\n    expiredAuthenticationToken: \"expiredAuthenticationToken\",\r\n    authenticationError: \"authenticationError\",\r\n    missingOrWrongAuthenticationToken: \"missingOrWrongAuthenticationToken\",\r\n    wrongAuthenticationToken: \"wrongAuthenticationToken\",\r\n    info: \"info\",\r\n    success: \"success\",\r\n    warning: \"warning\",\r\n    error: \"error\",\r\n    orderAddedSuccessfully: \"orderAddedSuccessfully\",\r\n    orderEditedSuccessfully: \"orderEditedSuccessfully\",\r\n    orderRemovedSuccessfully: \"orderRemovedSuccessfully\",\r\n    confirm: \"confirm\",\r\n    checked: \"checked\",\r\n    ordersEmpty: \"ordersEmpty\",\r\n    groupAlreadyExists: \"groupAlreadyExists\",\r\n    groupDoesNotExists: \"groupDoesNotExists\",\r\n    groupDoesNotExistsOrWrongPassword: \"groupDoesNotExistsOrWrongPassword\",\r\n    orderAlreadyConfirmedCannotEdit: \"orderAlreadyConfirmedCannotEdit\",\r\n    orderDoesNotExists: \"orderDoesNotExists\",\r\n    userAlreadyExistsInGroup: \"userAlreadyExistsInGroup\",\r\n    userDoesNotExists: \"userDoesNotExists\",\r\n    internalServerError: \"internalServerError\",\r\n    orderIsNotConfirmed: \"orderIsNotConfirmed\",\r\n    orderCheckedSuccessfully: \"orderCheckedSuccessfully\",\r\n    language: \"language\",\r\n    ordersToShow: \"ordersToShow\",\r\n    cart: \"cart\"\r\n};\r\n\r\nexport default translations;","import axios, { AxiosError } from \"axios\";\r\nimport AlertService from \"../services/alert.service\";\r\nimport { AlertType } from \"./Enums\";\r\nimport translations from \"./TranslationKeys\";\r\nimport UserUtils from \"./UserUtils\";\r\n\r\nexport function ToFirstCapitalLetter(text: string) {\r\n    return text.charAt(0).toUpperCase() + text.slice(1);\r\n}\r\n\r\nexport function handleError(error: Error | AxiosError) {\r\n    if (axios.isAxiosError(error))  {\r\n        // Access to config, request, and response\r\n        console.error(error);\r\n\r\n        const errorResponse = (error.response as any);\r\n        const errorMessage = errorResponse?.data?.translationKey ?? errorResponse?.data?.message ?? error.message;\r\n        AlertService.showAlert(errorMessage, AlertType.error);\r\n\r\n        if (UserUtils.IsLoggedIn() \r\n            && (errorMessage === translations.authenticationError \r\n            || errorMessage === translations.expiredAuthenticationToken \r\n            || errorMessage === translations.missingOrWrongAuthenticationToken)) {\r\n            setTimeout(() => {\r\n                UserUtils.removeUser();\r\n                window.location.reload();\r\n            }, 3000);\r\n        }\r\n    } else {\r\n        // Just a stock error\r\n        console.error(error);\r\n        AlertService.showAlert(error.message, AlertType.error);\r\n    }\r\n}\r\n\r\nexport function isNullOrUndefined(obj: any) {\r\n    return obj === null || obj === undefined;\r\n}","import axios from 'axios';\r\nimport OrderPost from '../Interfaces/OrderPost.interface';\r\nimport BaseService from './base.service';\r\n\r\nexport class OrderService extends BaseService {\r\n    private static instance: OrderService;\r\n\r\n    public static getInstance() {\r\n        if (!OrderService.instance) {\r\n            OrderService.instance = new OrderService();\r\n        }\r\n\r\n        return OrderService.instance;\r\n    }\r\n\r\n    public addOrder(token: string, orderPost: OrderPost) {\r\n        return axios.post(this.baseUrl + \"orders\", orderPost, this.config(token));\r\n    }\r\n\r\n    public getOrders(token: string, groupId: number = -1, userId: number = -1) {\r\n        let query = groupId > -1 ? `groupId=${groupId}` : \"\";\r\n        query += userId > -1 ? (query.length > 0 ? \"&\" : \"\") + `userId=${userId}` : \"\";\r\n        query = query.length > 0 ? `?${query}` : \"\";\r\n        return axios.get(this.baseUrl + \"orders\" + query, this.config(token));\r\n    }\r\n\r\n    public deleteOrder(token: string, orderId: number) {\r\n        return axios.delete(`${this.baseUrl}orders/${orderId}`, this.config(token));\r\n    }\r\n\r\n    public updateOrderAmount(token: string, orderId: number, amount: number) {\r\n        return axios.patch(`${this.baseUrl}orders/${orderId}`, {amount}, this.config(token));\r\n    }\r\n\r\n    public updateOrderChecked(token: string, orderId: number, checked: boolean) {\r\n        return axios.patch(`${this.baseUrl}orders/${orderId}`, {checked}, this.config(token));\r\n    }\r\n}\r\n\r\nexport default OrderService.getInstance();","import React from 'react';\r\n\r\nimport { AxiosError } from 'axios';\r\n\r\nimport {WithTranslation} from \"react-i18next\";\r\n\r\nimport OrderService from '../services/order.service';\r\nimport UserUtils from '../Utils/UserUtils';\r\nimport { handleError } from '../Utils/Utils';\r\n\r\nexport interface IOrdersListProps extends WithTranslation { }\r\n\r\nexport interface IOrdersListState {\r\n  orders: any[],\r\n  isLoading: boolean\r\n}\r\n\r\nexport class OrdersList<P extends IOrdersListProps, S extends IOrdersListState> extends React.Component<P, S> {\r\n\r\n  updateOrders(userId: number = -1, groupId: number = -1) {\r\n    const user = UserUtils.getUser();\r\n    if (user == null) {\r\n      window.location.reload();\r\n      return;\r\n    }\r\n\r\n    this.setState({isLoading: true});\r\n    OrderService.getOrders(user.accessToken, groupId, userId)\r\n    .then(res => {\r\n      const orders = res.data as any[];\r\n      const sortedOrders = orders\r\n        .sort((a: any, b:any) => {\r\n          const roundOrderValue = a.round - b.round;\r\n          return roundOrderValue !== 0 ? roundOrderValue : a.code - b.code;\r\n        });\r\n      console.log(sortedOrders);\r\n      \r\n      this.setState({orders: orders, isLoading: false});\r\n    })\r\n    .catch((error: Error | AxiosError) => {\r\n      handleError(error);\r\n\r\n      this.setState({isLoading: false});\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.updateOrders();\r\n  }\r\n}","import React from 'react';\r\n\r\nimport {WithTranslation, withTranslation} from \"react-i18next\";\r\n\r\nimport IconButton from '@mui/material/IconButton';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableRow from '@mui/material/TableRow';\r\n\r\nimport AddBoxIcon from '@mui/icons-material/AddBox';\r\n\r\nimport translations from '../../Utils/TranslationKeys';\r\nimport OrderService from '../../services/order.service';\r\nimport { TextField } from '@mui/material';\r\nimport OrderPost from '../../Interfaces/OrderPost.interface';\r\nimport UserUtils from '../../Utils/UserUtils';\r\nimport { handleError } from '../../Utils/Utils';\r\nimport alertService from '../../services/alert.service';\r\nimport { AlertType } from '../../Utils/Enums';\r\n\r\ninterface IProps extends WithTranslation {\r\n    updateOrders: () => void,\r\n    ordersConfirmed: boolean\r\n}\r\n\r\ninterface IState {\r\n    code: string,\r\n    amount: number | \"\"\r\n}\r\n      \r\nclass AddOrder extends React.Component<IProps, IState> {\r\n\r\n        constructor(props: IProps) {\r\n          super(props);\r\n          this.state = {\r\n            code: \"\",\r\n            amount: \"\"\r\n          };\r\n        }\r\n      \r\n          handleInputChange(event: React.ChangeEvent<HTMLInputElement>) {\r\n            const target = event.target;\r\n            if (target != null) {\r\n              const value = target.type === 'checkbox' ? target.checked : target.value;\r\n              const name = target.name;\r\n        \r\n              this.setState({\r\n                [name]: value\r\n              } as unknown as IState);\r\n            }\r\n          }\r\n      \r\n          addOrder() {\r\n            if (this.state.code === \"\" || this.state.amount === \"\" || this.state.amount < 1) {\r\n              return;\r\n            }\r\n\r\n            const orderPost: OrderPost = {\r\n              code: this.state.code,\r\n              amount: +this.state.amount\r\n            };\r\n      \r\n            console.debug(this.state.amount);\r\n      \r\n            const accessToken = UserUtils.getToken();\r\n            if (accessToken == null) {\r\n                return;\r\n            }\r\n      \r\n            OrderService.addOrder(accessToken, orderPost)\r\n            .then(res => {\r\n              console.debug(res.data);\r\n              alertService.showAlert(translations.orderAddedSuccessfully, AlertType.success);\r\n      \r\n              this.setState({code: \"\", amount: 0});\r\n      \r\n              this.props.updateOrders();\r\n            })\r\n            .catch(handleError);\r\n          }\r\n      \r\n          render() {\r\n            const { t } = this.props;\r\n            return (\r\n                <TableRow key=\"add\">\r\n                <TableCell align=\"center\">\r\n                    <TextField\r\n                        autoComplete=\"code\"\r\n                        name=\"code\"\r\n                        variant=\"outlined\"\r\n                        required\r\n                        disabled={this.props.ordersConfirmed}\r\n                        id=\"code\"\r\n                        label={t(translations.code)}\r\n                        fullWidth\r\n                        onChange={this.handleInputChange.bind(this)}\r\n                        value={this.state.code}\r\n                        />\r\n                </TableCell>\r\n                <TableCell align=\"center\">\r\n                        <TextField\r\n                            autoComplete=\"amount\"\r\n                            name=\"amount\"\r\n                            variant=\"outlined\"\r\n                            required\r\n                            disabled={this.props.ordersConfirmed}\r\n                            fullWidth\r\n                            id=\"amount\"\r\n                            inputProps={{ inputMode: 'numeric', pattern: '[0-9]*' }}\r\n                            label={t(translations.amount)}\r\n                            onChange={this.handleInputChange.bind(this)}\r\n                            value={this.state.amount}\r\n                            />\r\n                </TableCell>\r\n                <TableCell align=\"center\">\r\n                  <IconButton disabled={this.props.ordersConfirmed} aria-label={t(translations.add)} size=\"large\" onClick={this.addOrder.bind(this)}>\r\n                    <AddBoxIcon fontSize=\"inherit\" color=\"success\" />\r\n                  </IconButton>\r\n                </TableCell>\r\n                </TableRow>\r\n            );\r\n          }\r\n      }\r\n      \r\nexport default withTranslation('')(AddOrder);\r\n  ","import React from 'react';\r\n\r\nimport {Grid, IconButton, TextField} from '@mui/material';\r\nimport { AddCircle, RemoveCircle } from '@mui/icons-material';\r\n\r\nimport { withTranslation, WithTranslation } from 'react-i18next';\r\n\r\nimport translations from '../../Utils/TranslationKeys';\r\nimport OrderService from '../../services/order.service';\r\nimport UserUtils from '../../Utils/UserUtils';\r\nimport { handleError } from '../../Utils/Utils';\r\nimport alertService from '../../services/alert.service';\r\nimport { AlertType } from '../../Utils/Enums';\r\n\r\ninterface IProps extends WithTranslation {\r\n    amount: number,\r\n    orderId: number,\r\n    updateOrders: () => void\r\n}\r\n\r\ninterface IState {\r\n    amount: number,\r\n    updateTimeoutId: number | null\r\n}\r\n\r\nclass EditOrder extends React.Component<IProps, IState> {\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            amount: props.amount,\r\n            updateTimeoutId: null\r\n        };\r\n    }\r\n\r\n    updateOrder() {\r\n        if (this.state.updateTimeoutId !== null) {\r\n            window.clearTimeout(this.state.updateTimeoutId);\r\n        }\r\n\r\n        if (this.props.amount === this.state.amount) {\r\n            return;\r\n        }\r\n\r\n        const orderId = this.props.orderId;\r\n        const newAmount = this.state.amount;\r\n        console.debug(\"newAmount\", this.state.amount);\r\n\r\n        const token = UserUtils.getToken();\r\n        if (token == null) {\r\n            window.location.reload();\r\n            return;\r\n        }\r\n\r\n        OrderService.updateOrderAmount(token, orderId, newAmount)\r\n        .then(res => {\r\n          console.debug(res.data);\r\n          alertService.showAlert(translations.orderEditedSuccessfully, AlertType.success);\r\n\r\n          this.props.updateOrders();\r\n        })\r\n        .catch(handleError);\r\n    }\r\n\r\n    updateAmount(amountDiff: number) {\r\n        if (this.state.updateTimeoutId !== null) {\r\n            window.clearTimeout(this.state.updateTimeoutId);\r\n        }\r\n\r\n        this.setState({\r\n            amount: this.state.amount+amountDiff,\r\n            updateTimeoutId: window.setTimeout(this.updateOrder.bind(this), 3000)\r\n        });\r\n    }\r\n\r\n    handleAmountChange(event: React.ChangeEvent<HTMLInputElement>) {\r\n        const target = event.target;\r\n        if (target != null) {\r\n          this.setState({\r\n            amount: +target.value\r\n          } as unknown as IState);\r\n        }\r\n      }\r\n\r\n    render() {\r\n        const { t } = this.props;\r\n\r\n        return <Grid container wrap=\"nowrap\" alignContent=\"center\" alignItems=\"center\">\r\n        <Grid xs-item={2}>\r\n        <IconButton xs-item={2} aria-label={t(translations.subtract)} onClick={this.updateAmount.bind(this, -1)}>\r\n          <RemoveCircle color=\"primary\" />\r\n        </IconButton>\r\n        </Grid>\r\n        <Grid xs-item={6}>\r\n            <TextField\r\n                autoComplete=\"amount\"\r\n                name={\"amount\"+this.props.orderId}\r\n                required\r\n                id={\"amount\"+this.props.orderId}\r\n                inputProps={{ inputMode: 'numeric', pattern: '[0-9]*', style: { textAlign: 'center' } }}\r\n                label={t(translations.amount)}\r\n                onBlur={(e) => {\r\n                    console.debug(\"blur\");\r\n                    this.updateOrder();\r\n                }}\r\n                onKeyDown={e => {\r\n                    if (e.key === \"Enter\") {\r\n                        console.debug(\"enter\");\r\n                        (e.target as HTMLInputElement).blur();\r\n                    }\r\n                }}\r\n                onChange={this.handleAmountChange.bind(this)}\r\n                value={this.state.amount}\r\n                variant=\"standard\"\r\n                />\r\n        </Grid>\r\n        <Grid xs-item={2}>\r\n        <IconButton xs-item={2} aria-label={t(translations.add)} onClick={this.updateAmount.bind(this, 1)}>\r\n          <AddCircle color=\"primary\" />\r\n        </IconButton>\r\n        </Grid>\r\n      </Grid>;\r\n    }\r\n}\r\n\r\nexport default withTranslation('')(EditOrder);","import { IconButton, TableCell, TableRow } from \"@mui/material\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport IndeterminateCheckBoxIcon from \"@mui/icons-material/IndeterminateCheckBox\";\r\n\r\nimport alertService from \"../../services/alert.service\";\r\nimport OrderService from \"../../services/order.service\";\r\nimport { AlertType } from \"../../Utils/Enums\";\r\nimport translations from \"../../Utils/TranslationKeys\";\r\nimport UserUtils from \"../../Utils/UserUtils\";\r\nimport { handleError, isNullOrUndefined } from \"../../Utils/Utils\";\r\nimport EditOrder from \"./EditOrder\";\r\n\r\n\r\ninterface IProps {\r\n    confirmed: boolean,\r\n    orderRow: any,\r\n    updateOrders: () => void\r\n}\r\n\r\nexport default function CartOrdersRow(props: IProps) {\r\n    const { confirmed, orderRow, updateOrders } = props;\r\n    const { t } = useTranslation();\r\n\r\n    const deleteOrder = () => {\r\n        const accessToken = UserUtils.getToken();\r\n        if (accessToken == null) {\r\n          window.location.reload();\r\n          return;\r\n        }\r\n  \r\n        OrderService.deleteOrder(accessToken, orderRow.orderId)\r\n        .then(res => {\r\n          console.debug(res.data);\r\n          alertService.showAlert(translations.orderRemovedSuccessfully, AlertType.success);\r\n  \r\n          updateOrders();\r\n        })\r\n        .catch((e: Error) => {\r\n            handleError(e);\r\n        });\r\n      }\r\n\r\n    const notConfirmedUsersOrders = isNullOrUndefined(orderRow.round)\r\n        && !confirmed;\r\n\r\n    return <TableRow key={orderRow.orderId}>\r\n        <TableCell align=\"center\">{orderRow.code}</TableCell>\r\n        <TableCell align=\"center\">\r\n            {notConfirmedUsersOrders\r\n                ? <EditOrder orderId={orderRow.orderId} amount={orderRow.amount} updateOrders={updateOrders} />\r\n                : orderRow.amount\r\n            }\r\n        </TableCell>\r\n        <TableCell align=\"center\">\r\n            {notConfirmedUsersOrders\r\n                && <IconButton aria-label={t(translations.remove)} size=\"large\" onClick={() => deleteOrder()}>\r\n                <IndeterminateCheckBoxIcon fontSize=\"inherit\" color=\"error\" />\r\n              </IconButton>\r\n            }\r\n        </TableCell>\r\n    </TableRow>;\r\n}","import React from 'react';\r\n\r\nimport { withTranslation } from \"react-i18next\";\r\n\r\nimport Button from '@mui/material/Button';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport Paper from '@mui/material/Paper';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\n\r\nimport translations from '../../Utils/TranslationKeys';\r\nimport UserService from '../../services/user.service';\r\n\r\nimport UserUtils from '../../Utils/UserUtils';\r\nimport AddOrder from './AddOrder';\r\nimport { handleError, ToFirstCapitalLetter } from '../../Utils/Utils';\r\nimport { IOrdersListProps } from '../OrdersList';\r\nimport CartOrdersRow from './CartOrdersRow';\r\n\r\ninterface IGenericOrdersListProps extends IOrdersListProps {\r\n  isLoading: boolean,\r\n  orders: any[],\r\n  setIsLoading: (isLoading: boolean) => void,\r\n  updateOrders: () => void\r\n}\r\n\r\ninterface IGenericOrdersListState {\r\n  confirmed: boolean\r\n}\r\n\r\nclass CartOrdersList extends React.Component<IGenericOrdersListProps, IGenericOrdersListState> {\r\n\r\n  constructor(props: IGenericOrdersListProps) {\r\n    super(props);\r\n\r\n    const user = UserUtils.getUser();\r\n    if (user == null) {\r\n      window.location.reload();\r\n      return;\r\n    }\r\n\r\n    this.state = {\r\n      confirmed: user.confirmed\r\n    };\r\n  }\r\n\r\n  updateUserConfirmation() {\r\n    const confirmed = !this.state.confirmed;\r\n\r\n    const user = UserUtils.getUser();\r\n    if (user == null) {\r\n      window.location.reload();\r\n      return;\r\n    }\r\n\r\n    UserService.updateUserConfirmation(user.accessToken, user.userId, confirmed)\r\n      .then(res => {\r\n        console.debug(res.data);\r\n\r\n        this.props.updateOrders();\r\n      })\r\n      .catch(handleError);\r\n  }\r\n\r\n  render() {\r\n    const { t } = this.props;\r\n    const bottomBarHeight = '50px';\r\n\r\n    let ordersRows = <TableRow>\r\n      <TableCell colSpan={3} align=\"center\">{ToFirstCapitalLetter(t(translations.ordersEmpty))}</TableCell>\r\n    </TableRow>;\r\n    if (this.props.orders.length > 0) {\r\n      ordersRows = <React.Fragment>\r\n        {this.props.orders.map((row) => <CartOrdersRow confirmed={this.state.confirmed} orderRow={row} updateOrders={this.props.updateOrders} />)}\r\n      </React.Fragment>\r\n    }\r\n\r\n    return (\r\n      <Paper square sx={{ pb: bottomBarHeight }}>\r\n        <TableContainer component={Paper}>\r\n          <Table aria-label=\"simple table\">\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell align=\"center\">{ToFirstCapitalLetter(t(translations.code))}</TableCell>\r\n                <TableCell align=\"center\">{ToFirstCapitalLetter(t(translations.amount))}</TableCell>\r\n                <TableCell align=\"center\">{ToFirstCapitalLetter(t(translations.actions))/*Users*/}</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              <AddOrder updateOrders={this.props.updateOrders} ordersConfirmed={this.state.confirmed} />\r\n              {this.props.isLoading\r\n                ? <TableRow><TableCell colSpan={3} align=\"center\"><CircularProgress /></TableCell></TableRow>\r\n                : ordersRows\r\n              }\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <Button fullWidth variant=\"contained\" color=\"primary\" onClick={() => this.updateUserConfirmation()}>{ToFirstCapitalLetter(t(translations.confirm))}</Button>\r\n      </Paper>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withTranslation('')(CartOrdersList);","import { Checkbox, TableCell, TableRow } from \"@mui/material\";\r\n\r\nimport alertService from \"../../services/alert.service\";\r\nimport OrderService from \"../../services/order.service\";\r\nimport { AlertType } from \"../../Utils/Enums\";\r\nimport translations from \"../../Utils/TranslationKeys\";\r\nimport UserUtils from \"../../Utils/UserUtils\";\r\nimport { handleError } from \"../../Utils/Utils\";\r\n\r\n\r\ninterface IProps {\r\n    orderRow: any,\r\n    updateOrders: () => void,\r\n    setIsLoading: (isLoading: boolean) => void\r\n}\r\n\r\nexport default function UserConfirmedOrdersRow(props: IProps) {\r\n    const { orderRow, setIsLoading, updateOrders } = props;\r\n\r\n    const handleCheckChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const target = event.target;\r\n        if (target != null) {\r\n          const value = target.type === 'checkbox' ? target.checked : target.value;\r\n    \r\n          const accessToken = UserUtils.getToken();\r\n          if (accessToken == null) {\r\n            window.location.reload();\r\n            return;\r\n          }\r\n    \r\n          setIsLoading(true);\r\n          OrderService.updateOrderChecked(accessToken, orderRow.orderId, value as boolean)\r\n            .then(res => {\r\n              console.debug(res.data);\r\n              alertService.showAlert(translations.orderCheckedSuccessfully, AlertType.success);\r\n    \r\n              updateOrders();\r\n            })\r\n            .catch((error: Error) => {\r\n              handleError(error);\r\n    \r\n              setIsLoading(false);\r\n            });\r\n        }\r\n      }\r\n\r\n    return <TableRow key={orderRow.orderId}>\r\n      <TableCell>\r\n        <Checkbox name={\"check-\" + orderRow.orderId} checked={orderRow.checked} onChange={handleCheckChange} />\r\n      </TableCell>\r\n      <TableCell align=\"center\" component=\"th\" scope=\"row\">{orderRow.round}</TableCell>\r\n      <TableCell align=\"center\">{orderRow.code}</TableCell>\r\n      <TableCell align=\"center\">{orderRow.amount}</TableCell>\r\n    </TableRow>;\r\n  }","import { withTranslation } from \"react-i18next\";\r\n\r\nimport UserService from '../services/user.service';\r\n\r\nimport UserUtils from '../Utils/UserUtils';\r\nimport { handleError, ToFirstCapitalLetter } from '../Utils/Utils';\r\nimport User from '../Interfaces/User.interface';\r\nimport { IOrdersListProps, IOrdersListState, OrdersList } from './OrdersList';\r\nimport CartOrdersList from './UserCart/CartOrdersList';\r\nimport UserConfirmedOrdersList from './UserOrders/UserConfirmedOrdersList';\r\nimport { FormControl, InputLabel, MenuItem, Select } from \"@mui/material\";\r\nimport translations from \"../Utils/TranslationKeys\";\r\n\r\nenum RoundType {\r\n  cart = -1,\r\n  allConfirmed = 0\r\n}\r\n\r\ninterface IGenericOrdersListProps extends IOrdersListProps { }\r\n\r\ninterface IGenericOrdersListState extends IOrdersListState {\r\n  confirmed: boolean,\r\n  round: number\r\n}\r\n\r\nclass UserOrdersList extends OrdersList<IGenericOrdersListProps, IGenericOrdersListState> {\r\n\r\n  constructor(props: IGenericOrdersListProps) {\r\n    super(props);\r\n\r\n    const user = UserUtils.getUser();\r\n    if (user == null) {\r\n      window.location.reload();\r\n      return;\r\n    }\r\n\r\n    this.state = {\r\n      orders: [],\r\n      isLoading: false,\r\n      confirmed: user.confirmed,\r\n      round: RoundType.cart\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.updateOrders();\r\n  }\r\n\r\n  updateOrders() {\r\n    const user = UserUtils.getUser();\r\n    if (user == null) {\r\n      window.location.reload();\r\n      return;\r\n    }\r\n\r\n    super.updateOrders(user.userId);\r\n    this.updateConfirmed();\r\n  }\r\n\r\n  updateConfirmed() {\r\n    const user = UserUtils.getUser();\r\n    if (user == null) {\r\n      window.location.reload();\r\n      return;\r\n    }\r\n\r\n    UserService.getUser(user.accessToken, user.userId)\r\n      .then(res => {\r\n        console.debug(res.data);\r\n\r\n        const newUser = res.data as User;\r\n        this.setUserConfirmation(user, newUser.confirmed);\r\n      })\r\n      .catch(handleError);\r\n  }\r\n\r\n  setUserConfirmation(user: User, confirmed: boolean) {\r\n    user.confirmed = confirmed;\r\n    UserUtils.setUser(user);\r\n\r\n    this.setState({ confirmed: confirmed });\r\n  }\r\n\r\n  setIsLoading(isLoading: boolean) {\r\n    this.setState({ isLoading });\r\n  }\r\n\r\n  render() {\r\n    const { t } = this.props;\r\n\r\n    return (\r\n      <div>\r\n        <FormControl variant=\"filled\" fullWidth>\r\n          <InputLabel id=\"ordersToShowSelectLabel\">{ToFirstCapitalLetter(t(translations.ordersToShow))}</InputLabel>\r\n          <Select\r\n            id=\"ordersToShowSelect\"\r\n            labelId=\"ordersToShowSelectLabel\"\r\n            value={this.state.round.toString()}\r\n            onChange={(event) => {\r\n              const round = parseInt(event.target.value as string, 10);\r\n              this.setState({ round });\r\n            }}\r\n          >\r\n            <MenuItem key={RoundType.cart} value={RoundType.cart}>{ToFirstCapitalLetter(t(translations.cart))}</MenuItem>\r\n            <MenuItem key={RoundType.allConfirmed} value={RoundType.allConfirmed}>{ToFirstCapitalLetter(t(translations.allConfirmedOrders))}</MenuItem>\r\n            {this.state.orders.map(o => o.round)\r\n              .filter((value: any, index: number, array: any[]) => value && array.indexOf(value) === index)\r\n              .map(r => <MenuItem key={r} value={r}>{ToFirstCapitalLetter(t(translations.round)) + \" \" + r}</MenuItem>)}\r\n          </Select>\r\n        </FormControl>\r\n        {this.state.round === RoundType.cart &&\r\n          <CartOrdersList isLoading={this.state.isLoading} orders={this.state.orders.filter(o => !o.round)} setIsLoading={this.setIsLoading.bind(this)} updateOrders={this.updateOrders.bind(this)} />}\r\n        {this.state.round !== RoundType.cart &&\r\n          <UserConfirmedOrdersList isLoading={this.state.isLoading} orders={this.state.orders.filter(o => o.round && (this.state.round === RoundType.allConfirmed || o.round === this.state.round))} setIsLoading={this.setIsLoading.bind(this)} updateOrders={this.updateOrders.bind(this)} />}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withTranslation('')(UserOrdersList);","import React from 'react';\r\n\r\nimport { withTranslation } from \"react-i18next\";\r\n\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport Paper from '@mui/material/Paper';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\n\r\nimport translations from '../../Utils/TranslationKeys';\r\n\r\nimport UserUtils from '../../Utils/UserUtils';\r\nimport { ToFirstCapitalLetter } from '../../Utils/Utils';\r\nimport { IOrdersListProps } from '../OrdersList';\r\nimport UserConfirmedOrdersRow from './UserConfirmedOrdersRow';\r\n\r\ninterface IGenericOrdersListProps extends IOrdersListProps {\r\n  isLoading: boolean,\r\n  orders: any[],\r\n  setIsLoading: (isLoading: boolean) => void,\r\n  updateOrders: () => void\r\n}\r\n\r\ninterface IGenericOrdersListState { }\r\n\r\nclass UserConfirmedOrdersList extends React.Component<IGenericOrdersListProps, IGenericOrdersListState> {\r\n\r\n  constructor(props: IGenericOrdersListProps) {\r\n    super(props);\r\n\r\n    const user = UserUtils.getUser();\r\n    if (user == null) {\r\n      window.location.reload();\r\n      return;\r\n    }\r\n\r\n    this.state = { };\r\n  }\r\n\r\n  render() {\r\n    const { t } = this.props;\r\n\r\n    let ordersRows = <TableRow>\r\n      <TableCell colSpan={4} align=\"center\">{ToFirstCapitalLetter(t(translations.ordersEmpty))}</TableCell>\r\n    </TableRow>;\r\n    if (this.props.orders.length > 0) {\r\n      ordersRows = <React.Fragment>\r\n        {this.props.orders.map((row) => <UserConfirmedOrdersRow orderRow={row} setIsLoading={this.props.setIsLoading} updateOrders={this.props.updateOrders} />)}\r\n      </React.Fragment>\r\n    }\r\n\r\n\r\n    return (\r\n      <TableContainer component={Paper}>\r\n        <Table aria-label=\"simple table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell align=\"center\" width=\"10%\">{ToFirstCapitalLetter(t(translations.checked))}</TableCell>\r\n              <TableCell align=\"center\" width=\"10%\">{ToFirstCapitalLetter(t(translations.round))}</TableCell>\r\n              <TableCell align=\"center\">{ToFirstCapitalLetter(t(translations.code))}</TableCell>\r\n              <TableCell align=\"center\">{ToFirstCapitalLetter(t(translations.amount))}</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {this.props.isLoading\r\n              ? <TableRow><TableCell colSpan={4} align=\"center\"><CircularProgress /></TableCell></TableRow>\r\n              : ordersRows\r\n            }\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withTranslation('')(UserConfirmedOrdersList);","import React from 'react';\r\n\r\nimport {useTranslation, withTranslation} from \"react-i18next\";\r\n\r\nimport Box from '@mui/material/Box';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport Collapse from '@mui/material/Collapse';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Paper from '@mui/material/Paper';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Typography from '@mui/material/Typography';\r\n\r\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\r\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\r\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\r\n\r\nimport translations from '../Utils/TranslationKeys';\r\nimport OrderService from '../services/order.service';\r\n\r\nimport UserUtils from '../Utils/UserUtils';\r\nimport { handleError, ToFirstCapitalLetter } from '../Utils/Utils';\r\nimport { AxiosError } from 'axios';\r\nimport { IOrdersListProps, IOrdersListState, OrdersList } from './OrdersList';\r\n\r\ninterface IGroupOrdersListState extends IOrdersListState { }\r\n\r\nclass UserOrdersList extends OrdersList<IOrdersListProps, IGroupOrdersListState> {\r\n\r\n  constructor(props: IOrdersListProps) {\r\n    super(props);\r\n\r\n    const user = UserUtils.getUser();\r\n    if (user == null) {\r\n      window.location.reload();\r\n      return;\r\n    }\r\n\r\n    this.state = {\r\n      orders: [],\r\n      isLoading: false\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.updateOrders();\r\n  }\r\n\r\n  updateOrders() {\r\n    const user = UserUtils.getUser();\r\n    if (user == null) {\r\n      window.location.reload();\r\n      return;\r\n    }\r\n\r\n    this.setState({isLoading: true});\r\n    const groupId = user.groupId;\r\n\r\n    OrderService.getOrders(user.accessToken, groupId, -1)\r\n    .then(res => {\r\n      this.setState({orders: (res.data as any[]).filter(o => o.round), isLoading: false});\r\n\r\n      console.debug(res.data);\r\n    })\r\n    .catch((error: Error | AxiosError) => {\r\n      handleError(error);\r\n\r\n      this.setState({isLoading: false});\r\n    });\r\n  }\r\n\r\n  usersTable() {\r\n    const { t } = this.props;\r\n\r\n    if (this.state.orders.length === 0) {\r\n      return ToFirstCapitalLetter(t(translations.ordersEmpty));\r\n    }\r\n\r\n    const usersList: any[] = [];\r\n    this.state.orders.forEach(o => {\r\n      const key = o.username ?? o.name + \" \" + o.surname;\r\n      usersList[key] = [...usersList[key] || [], o];\r\n    });\r\n\r\n    return <TableContainer component={Paper}>\r\n      <Table aria-label=\"collapsible table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell width=\"10%\" />\r\n            <TableCell width=\"10%\">{t(ToFirstCapitalLetter(translations.checked))}</TableCell>\r\n            <TableCell>{t(ToFirstCapitalLetter(translations.username))}</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {Object.entries(usersList).map((userRow: any) => <UserTableRow userRow={userRow} />)}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>;\r\n  }\r\n\r\n  render() {\r\n    const content = this.state.isLoading\r\n      ? <CircularProgress />\r\n      : this.usersTable();\r\n\r\n    return <Box justifyContent=\"center\">\r\n      {content}\r\n    </Box>\r\n  }\r\n}\r\n\r\nfunction UserTableRow(props: { userRow: any }) {\r\n  const { userRow } = props;\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  // the username or the combination of user's firstName and lastName\r\n  const username: string = userRow[0];\r\n  const userOrders = userRow[1];\r\n\r\n  const allUserOrdersChecked = userOrders.every((o: any) => o.checked);\r\n\r\n  const headerRow = <TableRow>\r\n    <TableCell>\r\n      <IconButton\r\n        aria-label=\"expand row\"\r\n        size=\"small\"\r\n        onClick={() => setOpen(!open)}\r\n      >\r\n        {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\r\n      </IconButton>\r\n    </TableCell>\r\n    <TableCell align=\"center\">{allUserOrdersChecked && <CheckCircleIcon color=\"success\" />}</TableCell>\r\n    <TableCell component=\"th\" scope=\"row\">{username}</TableCell>\r\n  </TableRow>;\r\n\r\n  const contentRow =<TableRow>\r\n    <TableCell colSpan={3}>\r\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n        <Box>\r\n          <Typography variant=\"h6\">\r\n            Orders\r\n          </Typography>\r\n          <UserOrders userOrders={userOrders} />\r\n        </Box>\r\n      </Collapse>\r\n    </TableCell>\r\n  </TableRow>;\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {headerRow}\r\n      {contentRow}\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nfunction UserOrders(props: { userOrders: any }) {\r\n  const { t } = useTranslation();\r\n\r\n  const { userOrders } = props;\r\n\r\n  return <TableContainer component={Paper}>\r\n      <Table aria-label=\"simple table\">\r\n      <TableHead>\r\n          <TableRow>\r\n            <TableCell width=\"10%\" align=\"center\">{ToFirstCapitalLetter(t(translations.checked))}</TableCell>\r\n            <TableCell width=\"10%\" align=\"center\">{ToFirstCapitalLetter(t(translations.round))}</TableCell>\r\n            <TableCell align=\"center\">{ToFirstCapitalLetter(t(translations.code))}</TableCell>\r\n            <TableCell align=\"center\">{ToFirstCapitalLetter(t(translations.amount))}</TableCell>\r\n          </TableRow>\r\n      </TableHead>\r\n      <TableBody>\r\n        {userOrders.map((userOrder: any) => <OrderRow userOrder={userOrder} />)}\r\n      </TableBody>\r\n      </Table>\r\n  </TableContainer>\r\n}\r\n\r\nfunction OrderRow(props: {userOrder: any}) {\r\n  const { userOrder } = props;\r\n\r\n  return <TableRow key={userOrder.orderId}>\r\n    <TableCell align=\"center\">{userOrder.checked && <CheckCircleIcon color=\"success\" />}</TableCell>\r\n    <TableCell align=\"center\" component=\"th\" scope=\"row\">{userOrder.round}</TableCell>\r\n    <TableCell align=\"center\">{userOrder.code}</TableCell>\r\n    <TableCell align=\"center\">{userOrder.amount}</TableCell>\r\n  </TableRow>;\r\n}\r\n\r\n\r\nexport default withTranslation('')(UserOrdersList);","import React from 'react';\r\n\r\nimport {useTranslation, withTranslation} from \"react-i18next\";\r\n\r\nimport Box from '@mui/material/Box';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport Collapse from '@mui/material/Collapse';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Paper from '@mui/material/Paper';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Typography from '@mui/material/Typography';\r\n\r\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\r\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\r\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\r\n\r\nimport translations from '../Utils/TranslationKeys';\r\nimport OrderService from '../services/order.service';\r\n\r\nimport UserUtils from '../Utils/UserUtils';\r\nimport { handleError, ToFirstCapitalLetter } from '../Utils/Utils';\r\nimport { AxiosError } from 'axios';\r\nimport { IOrdersListProps, IOrdersListState, OrdersList } from './OrdersList';\r\n\r\ninterface IConfirmedOrdersListState extends IOrdersListState {\r\n    expandedCode: string\r\n}\r\n\r\nclass ConfirmedOrdersList extends OrdersList<IOrdersListProps, IConfirmedOrdersListState> {\r\n\r\n  constructor(props: IOrdersListProps) {\r\n    super(props);\r\n\r\n    const user = UserUtils.getUser();\r\n    if (user == null) {\r\n      window.location.reload();\r\n      return;\r\n    }\r\n\r\n    this.state = {\r\n      orders: [],\r\n      isLoading: false,\r\n      expandedCode: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.updateOrders();\r\n  }\r\n\r\n  updateOrders() {\r\n    const user = UserUtils.getUser();\r\n    if (user == null) {\r\n      window.location.reload();\r\n      return;\r\n    }\r\n\r\n    this.setState({isLoading: true});\r\n    const groupId = user.groupId;\r\n\r\n    OrderService.getOrders(user.accessToken, groupId, -1)\r\n    .then(res => {\r\n      this.setState({orders: (res.data as any[]).filter(o => o.round), isLoading: false});\r\n\r\n      console.debug(res.data);\r\n    })\r\n    .catch((error: Error | AxiosError) => {\r\n      handleError(error);\r\n\r\n      this.setState({isLoading: false});\r\n    });\r\n  }\r\n\r\n  codesTable() {\r\n    const { t } = this.props;\r\n\r\n    if (this.state.orders.length === 0) {\r\n      return ToFirstCapitalLetter(t(translations.ordersEmpty));\r\n    }\r\n\r\n    // group orders by code\r\n    const codesList: any[] = [];\r\n    this.state.orders.forEach(o => {\r\n      const key = o.code;\r\n      codesList[key] = [...codesList[key] || [], o];\r\n    });\r\n\r\n    return <TableContainer component={Paper}>\r\n      <Table aria-label=\"collapsible table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell width=\"10%\" />\r\n            <TableCell width=\"10%\">{t(ToFirstCapitalLetter(translations.checked))}</TableCell>\r\n            <TableCell align=\"center\">{t(ToFirstCapitalLetter(translations.code))}</TableCell>\r\n            <TableCell align=\"center\">{t(ToFirstCapitalLetter(translations.amount))}</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {Object.entries(codesList).map((codeRow: any) => <CodeUsersTable codeRow={codeRow} />)}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>;\r\n  }\r\n\r\n  render() {\r\n    const content = this.state.isLoading\r\n      ? <CircularProgress />\r\n      : this.codesTable();\r\n\r\n    return <Box justifyContent=\"center\">\r\n      {content}\r\n    </Box>\r\n  }\r\n}\r\n\r\nfunction CodeUsersTable(props: { codeRow: any }) {\r\n  const { codeRow } = props;\r\n  const [open, setOpen] = React.useState(false);\r\n  \r\n    const code = codeRow[0];\r\n    // The orders of the users with the same code\r\n    const usersOrders = codeRow[1];\r\n    let codeTotalAmount = 0;\r\n    usersOrders.forEach((o: any) => {\r\n        codeTotalAmount += o.amount;\r\n    });\r\n  const allCodeOrdersChecked = usersOrders.every((o: any) => o.checked);\r\n\r\n  const headerRow = <TableRow>\r\n    <TableCell>\r\n      <IconButton\r\n        aria-label=\"expand row\"\r\n        size=\"small\"\r\n        onClick={() => setOpen(!open)}\r\n      >\r\n        {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\r\n      </IconButton>\r\n    </TableCell>\r\n    <TableCell align=\"center\">{allCodeOrdersChecked && <CheckCircleIcon color=\"success\" />}</TableCell>\r\n    <TableCell align=\"center\" component=\"th\" scope=\"row\">{code}</TableCell>\r\n    <TableCell align=\"center\">{codeTotalAmount}</TableCell>\r\n  </TableRow>;\r\n\r\n  const contentRow =<TableRow>\r\n    <TableCell colSpan={4}>\r\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n        <Box>\r\n          <Typography variant=\"h6\">\r\n            Orders\r\n          </Typography>\r\n          <UsersOrders usersOrders={usersOrders} />\r\n        </Box>\r\n      </Collapse>\r\n    </TableCell>\r\n  </TableRow>;\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {headerRow}\r\n      {contentRow}\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nfunction UsersOrders(props: { usersOrders: any }) {\r\n  const { t } = useTranslation();\r\n\r\n  const { usersOrders } = props;\r\n\r\n  return <TableContainer component={Paper}>\r\n      <Table aria-label=\"simple table\">\r\n      <TableHead>\r\n          <TableRow>\r\n            <TableCell align=\"center\" width=\"10%\">{ToFirstCapitalLetter(t(translations.checked))}</TableCell>\r\n            <TableCell align=\"center\" width=\"10%\">{ToFirstCapitalLetter(t(translations.round))}</TableCell>\r\n            <TableCell align=\"center\">{ToFirstCapitalLetter(t(translations.username))}</TableCell>\r\n            <TableCell align=\"center\">{ToFirstCapitalLetter(t(translations.amount))}</TableCell>\r\n          </TableRow>\r\n      </TableHead>\r\n      <TableBody>\r\n        {usersOrders.map((userOrder: any) => <UserOrderRow userOrder={userOrder} />)}\r\n      </TableBody>\r\n      </Table>\r\n  </TableContainer>\r\n}\r\n\r\nfunction UserOrderRow(props: {userOrder: any}) {\r\n  const { userOrder } = props;\r\n\r\n  const username = userOrder.username ?? userOrder.name + \" \" + userOrder.surname;\r\n\r\n  return <TableRow key={userOrder.orderId}>\r\n    <TableCell align=\"center\">{userOrder.checked && <CheckCircleIcon color=\"success\" />}</TableCell>\r\n    <TableCell align=\"center\" component=\"th\" scope=\"row\">{userOrder.round}</TableCell>\r\n    <TableCell align=\"center\">{username}</TableCell>\r\n    <TableCell align=\"center\">{userOrder.amount}</TableCell>\r\n  </TableRow>;\r\n}\r\n\r\nexport default withTranslation('')(ConfirmedOrdersList);","import { useState } from 'react';\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport { FormControl, Grid, InputLabel, MenuItem, Select, SelectChangeEvent } from '@mui/material';\r\n\r\nimport UserOrdersList from './UserOrdersList';\r\nimport GroupOrdersList from './GroupOrdersList';\r\nimport ConfirmedOrdersList from './ConfirmedOrdersList';\r\nimport { OrdersType } from '../Utils/Enums';\r\nimport translations from '../Utils/TranslationKeys';\r\nimport { ToFirstCapitalLetter } from '../Utils/Utils';\r\n\r\nexport default function Orders() {\r\n  const { t } = useTranslation();\r\n  const [ordersType, setOrdersType] = useState(OrdersType.user);\r\n\r\n  let ordersList: JSX.Element = <UserOrdersList />;\r\n  switch (ordersType) {\r\n    case OrdersType.user:\r\n      ordersList = <UserOrdersList />;\r\n      break;\r\n    case OrdersType.group:\r\n      ordersList = <GroupOrdersList />;\r\n      break;\r\n    case OrdersType.all:\r\n      ordersList = <ConfirmedOrdersList />;\r\n      break;\r\n  }\r\n  \r\n  return (\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12}>\r\n          <FormControl variant=\"filled\" fullWidth>\r\n            <InputLabel id=\"ordersListTypeLabel\">Orders list type</InputLabel>\r\n            <Select\r\n              labelId=\"ordersListTypeLabel\"\r\n              id=\"ordersListType\"\r\n              value={ordersType.toString()}\r\n              label=\"Orders list type\"\r\n              onChange={(event: SelectChangeEvent) => {\r\n                const value = event.target.value;\r\n                setOrdersType(parseInt(value, 10));\r\n              }}\r\n            >\r\n              <MenuItem value={OrdersType.user}>{ToFirstCapitalLetter(t(translations.userOrders))}</MenuItem>\r\n              <MenuItem value={OrdersType.group}>{ToFirstCapitalLetter(t(translations.groupOrders))}</MenuItem>\r\n              <MenuItem value={OrdersType.all}>{ToFirstCapitalLetter(t(translations.allConfirmedOrders))}</MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          {ordersList}\r\n        </Grid>\r\n      </Grid>\r\n      );\r\n}","import React from 'react';\r\n\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport Button from '@mui/material/Button';\r\nimport TextField from '@mui/material/TextField';\r\nimport Grid from '@mui/material/Grid';\r\nimport Typography from '@mui/material/Typography';\r\n\r\nimport translations from '../Utils/TranslationKeys';\r\nimport { SignUpStep } from '../Utils/Enums';\r\n\r\ninterface IProps {\r\n  SetFirstName: React.Dispatch<React.SetStateAction<string>>,\r\n  SetLastName: React.Dispatch<React.SetStateAction<string>>,\r\n  SetUsername: React.Dispatch<React.SetStateAction<string>>,\r\n  SetStep: React.Dispatch<React.SetStateAction<SignUpStep>>\r\n}\r\n\r\nexport default function SignUpUser(props: IProps) {\r\n  const { t } = useTranslation();\r\n\r\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const target = event.target;\r\n    if (target != null) {\r\n      // const value = target.type === 'checkbox' ? target.checked : target.value;\r\n      const value = target.value;\r\n      const name = target.name;\r\n      \r\n      switch(name) {\r\n        case \"firstName\":\r\n          props.SetFirstName(value);\r\n          break;\r\n        case \"lastName\":\r\n          props.SetLastName(value);\r\n          break;\r\n        case \"username\":\r\n          props.SetUsername(value);\r\n          break;\r\n        default:\r\n          console.error(\"The input is not managed\")\r\n          break;\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleSubmit = () =>\r\n  {\r\n    props.SetStep(SignUpStep.group);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Typography component=\"h1\" variant=\"h5\">\r\n        Sign up - user info\r\n      </Typography>\r\n      <form noValidate onSubmit={handleSubmit}>\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={12} sm={6}>\r\n            <TextField\r\n              autoComplete=\"fname\"\r\n              name=\"firstName\"\r\n              variant=\"outlined\"\r\n              required\r\n              fullWidth\r\n              id=\"firstName\"\r\n              label={t(translations.firstName)}\r\n              autoFocus\r\n              onChange={handleInputChange}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              required\r\n              fullWidth\r\n              id=\"lastName\"\r\n              label={t(translations.lastName)}\r\n              name=\"lastName\"\r\n              autoComplete=\"lname\"\r\n              onChange={handleInputChange}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              id=\"username\"\r\n              label=\"Username\"\r\n              name=\"username\"\r\n              autoComplete={t(translations.username)}\r\n              onChange={handleInputChange}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        <Button\r\n          type=\"submit\"\r\n          fullWidth\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n        >\r\n          {t(translations.continue)}\r\n        </Button>\r\n      </form>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\n\r\nimport {withTranslation, WithTranslation} from \"react-i18next\";\r\n\r\nimport Button from '@mui/material/Button';\r\nimport TextField from '@mui/material/TextField';\r\nimport Grid from '@mui/material/Grid';\r\nimport Typography from '@mui/material/Typography';\r\n\r\nimport translations from '../Utils/TranslationKeys';\r\nimport { SignUpFormType, SignUpStep } from '../Utils/Enums';\r\n\r\ninterface IProps extends WithTranslation {\r\n  SetGroupName: React.Dispatch<React.SetStateAction<string>>,\r\n  SetGroupPassword: React.Dispatch<React.SetStateAction<string>>,\r\n  SetFormType: React.Dispatch<React.SetStateAction<SignUpFormType>>,\r\n  SetStep: (step: SignUpStep) => void\r\n}\r\n\r\ninterface IState {\r\n  groupName: string,\r\n  groupPassword: string,\r\n  formType: SignUpFormType\r\n}\r\n\r\nclass SignUpGroup extends React.Component<IProps, IState> {\r\n\r\n  constructor(props: IProps) {\r\n    super(props);\r\n    this.state = {\r\n      groupName: \"\",\r\n      groupPassword: \"\",\r\n      formType: SignUpFormType.create\r\n    };\r\n  }\r\n\r\n  handleInputChange(event: React.ChangeEvent<HTMLInputElement>) {\r\n    const target = event.target;\r\n    if (target != null) {\r\n      const value = target.type === 'checkbox' ? target.checked : target.value;\r\n      const name = target.name;\r\n\r\n      this.setState({\r\n        [name]: value\r\n      } as unknown as IState);\r\n    }\r\n  }\r\n\r\n  handleFormType(type: SignUpFormType) {\r\n\r\n    this.props.SetGroupName(this.state.groupName);\r\n    this.props.SetGroupPassword(this.state.groupPassword);\r\n    this.props.SetFormType(type);\r\n    this.props.SetStep(SignUpStep.submit);\r\n  }\r\n\r\n  render() {\r\n    const { t } = this.props;\r\n    return (\r\n      <div>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Sign up - group info\r\n        </Typography>\r\n        <form noValidate>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                autoComplete=\"gname\"\r\n                name=\"groupName\"\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                id=\"groupName\"\r\n                label={t(translations.groupName)}\r\n                autoFocus\r\n                onChange={this.handleInputChange.bind(this)}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                name=\"groupPassword\"\r\n                label={t(translations.groupPassword)}\r\n                type=\"password\"\r\n                id=\"password\"\r\n                autoComplete=\"current-password\"\r\n                onChange={this.handleInputChange.bind(this)}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <Button size=\"large\" variant=\"contained\" color=\"primary\" onClick={this.handleFormType.bind(this, SignUpFormType.create)}>{t(translations.createGroup)}</Button>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <Button size=\"large\" variant=\"contained\" color=\"primary\" onClick={this.handleFormType.bind(this, SignUpFormType.join)}>{t(translations.joinGroup)}</Button>\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withTranslation('')(SignUpGroup);","import { useEffect, useState } from 'react';\r\n\r\nimport Avatar from '@mui/material/Avatar';\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\nimport Link from '@mui/material/Link';\r\nimport Box from '@mui/material/Box';\r\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\r\nimport Typography from '@mui/material/Typography';\r\nimport Container from '@mui/material/Container';\r\n\r\nimport SignUpUser from './SignUpUser';\r\nimport SignUpGroup from './SignUpGroup';\r\nimport { SignUpFormType, SignUpStep } from '../Utils/Enums';\r\nimport AuthPost from '../Interfaces/AuthPost.interface';\r\nimport User from '../Interfaces/User.interface';\r\nimport UserService from '../services/user.service';\r\nimport UserUtils from '../Utils/UserUtils';\r\nimport { handleError } from '../Utils/Utils';\r\nimport { AxiosError } from 'axios';\r\n\r\nfunction Copyright() {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n      {'Copyright © '}\r\n      <Link color=\"inherit\" href=\"https://material-ui.com/\">\r\n        Your Website\r\n      </Link>{' '}\r\n      {new Date().getFullYear()}\r\n      {'.'}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nexport default function SignUp() {\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const [username, setUsername] = useState(\"\");\r\n  const [groupName, setGroupName] = useState(\"\");\r\n  const [groupPassword, setGroupPassword] = useState(\"\");\r\n  const [formType, setFormType] = useState(SignUpFormType.create);\r\n  const [step, setStep] = useState(SignUpStep.user);\r\n  \r\n  const handleSubmit = () => {\r\n    const authPost: AuthPost = {\r\n      name: firstName,\r\n      surname: lastName,\r\n      username: username === \"\" ? undefined : username,\r\n      groupName,\r\n      groupPassword,\r\n      signType: formType === SignUpFormType.join ? \"joinGroup\" : \"createGroup\"\r\n    }\r\n    UserUtils.removeUser();\r\n    UserService.signUp(authPost)\r\n      .then(res => {\r\n        console.debug(res.data);\r\n\r\n        UserUtils.setUser(res.data as User);\r\n        window.location.reload();\r\n      })\r\n      .catch((error: Error | AxiosError) => {\r\n        handleError(error);\r\n\r\n        setStep(SignUpStep.user);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n      if (step === SignUpStep.submit) {\r\n        handleSubmit();\r\n      }\r\n      // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [step]);\r\n  \r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div>\r\n        <Avatar>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        {step === SignUpStep.user ?\r\n          <SignUpUser SetFirstName={setFirstName} SetLastName={setLastName} SetUsername={setUsername} SetStep={setStep} />\r\n        :\r\n          <SignUpGroup SetGroupName={setGroupName} SetGroupPassword={setGroupPassword} SetFormType={setFormType} SetStep={setStep} />\r\n        }\r\n      </div>\r\n      <Box mt={5}>\r\n        <Copyright />\r\n      </Box>\r\n    </Container>\r\n  );\r\n}","import React from 'react';\r\n\r\nimport {useTranslation} from \"react-i18next\";\r\n\r\nimport { InputLabel, Select, MenuItem, FormControl } from '@mui/material';\r\nimport translations from './TranslationKeys';\r\nimport { ToFirstCapitalLetter } from './Utils';\r\n\r\nexport default function TranslationSelection()\r\n{\r\n    const { i18n, t } = useTranslation();\r\n    \r\n    const availableLanguages = [\r\n        {\r\n            key: 'en',\r\n            value: 'English'\r\n        },\r\n        {\r\n            key: 'it',\r\n            value: 'Italiano'\r\n        },\r\n    ];\r\n    \r\n    const [language, setLanguage] = React.useState(i18n.language);\r\n\r\n    return <div>\r\n        <FormControl variant=\"filled\">\r\n            <InputLabel id=\"translationsSelectLabel\">{ToFirstCapitalLetter(t(translations.language))}</InputLabel>\r\n            <Select\r\n                labelId=\"translationsSelectLabel\"\r\n                id=\"translationsSelect\"\r\n                value={language}\r\n                onChange={(event) => {\r\n                    const newLanguage = event.target.value as string;\r\n                    i18n.changeLanguage(newLanguage);\r\n                    setLanguage(newLanguage);\r\n                }}\r\n                >\r\n                {availableLanguages.map(l => <MenuItem key={l.key} value={l.key}>{l.value}</MenuItem>)}\r\n            </Select>\r\n        </FormControl>\r\n    </div>\r\n}","import { useState } from 'react';\r\n\r\nimport { Alert, AlertTitle, Collapse} from '@mui/material';\r\n\r\nimport AlertService from '../services/alert.service';\r\nimport { AlertType } from './Enums';\r\nimport { ToFirstCapitalLetter } from './Utils';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\n\r\n\r\nexport default function TopAlert() {\r\n  const [isAlertVisible, setAlertVisible] = useState(false);\r\n  const [alertText, setAlertText] = useState(\"\");\r\n  const [alertType, setAlertType] = useState(AlertType.info);\r\n  \r\n  const { t } = useTranslation();\r\n\r\n  AlertService.init(setAlertVisible, setAlertText, setAlertType);\r\n\r\n  return <Collapse in={isAlertVisible} sx={{position: 'fixed', top: 0, left: 0, right: 0}}>\r\n    <Alert severity={alertType}>\r\n      <AlertTitle>{ToFirstCapitalLetter(t(alertType))}</AlertTitle>\r\n      {t(alertText)}\r\n    </Alert>\r\n  </Collapse>;\r\n}","import { Suspense } from 'react';\r\n\r\nimport './App.css';\r\nimport Orders from './Orders/Orders';\r\nimport SignUp from './SignUp/SignUp';\r\nimport TranslationSelection from './Utils/TranslationSelection';\r\nimport UserUtils from './Utils/UserUtils';\r\nimport TopAlert from './Utils/TopAlert';\r\nimport { Grid } from '@mui/material';\r\n\r\nfunction App() {\r\n  return (\r\n    <Suspense fallback=\"loading\">\r\n      <TopAlert />\r\n      <div className=\"App\">\r\n        <Grid container alignItems=\"flex-start\" rowSpacing={1} sx={{ margin: \"5px\", maxWidth: \"calc(100% - 10px)\" }}>\r\n          <Grid item xs={12} container justifyContent=\"flex-end\">\r\n            <TranslationSelection />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <Content />\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    </Suspense>\r\n  );\r\n}\r\n\r\nfunction Content() {\r\n  if (UserUtils.IsLoggedIn()) {\r\n    return <Orders />;\r\n  } else {\r\n    return <SignUp />;\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import i18n from 'i18next'\nimport Backend from 'i18next-http-backend'\nimport LanguageDetector from 'i18next-browser-languagedetector'\nimport { initReactI18next } from 'react-i18next'\n\ni18n\n  // Enables the i18next backend\n  .use(Backend)\n  // Enable automatic language detection\n  .use(LanguageDetector)\n  // Enables the hook initialization module\n  .use (initReactI18next)\n  .init({\n    // Standard language used\n    fallbackLng: 'en',\n    debug: true,\n    //Detects and caches a cookie from the language provided\n    detection: {\n      order: ['queryString', 'cookie'],\n      cache: ['cookie']\n    },\n    interpolation: {\n      escapeValue: false\n    }\n  })\n\nexport default i18n;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './i18nextConf';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}